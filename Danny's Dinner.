-----Introduction-----
Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen.

Danny’s Diner is in need of your assistance to help the restaurant stay afloat - the restaurant has captured some very basic data from their few months of operation but have no idea how to use their data to help them run the business.

-----Problem Statement----
Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they’ve spent and also which menu items are their favourite. Having this deeper connection with his customers will help him deliver a better and more personalised experience for his loyal customers.

Danny has shared 3 key datasets for this case study:

--sales
The sales table captures all customer_id level purchases with an corresponding order_date and product_id information for when and what menu items were ordered.

--menu
The menu table maps the product_id to the actual product_name and price of each menu item.

--members
The final members table captures the join_date when a customer_id joined the beta version of the Danny’s Diner loyalty program.


Question 1: What is the total amount each customer spent at the restaurant?

Select sales.customer_id, sum(menu.price) as total_spending from sales join menu on sales.product_id= menu.product_id group by sales.customer_id;

Question 2: How many days has each customer visited the restaurant?

Select count(distinct order_date) as times_of_visit , customer_id from sales group by customer_id;

Question 3: What was the first item from the menu purchased by each customer?

Select customer_id , product_name from 
(Select sales.customer_id,menu.product_name, rank() over(partition by sales.customer_id order by sales.order_date asc) as order_rank
 from sales join menu on sales.product_id= menu.product_id) 
temp where order_rank=1 ;

Question 4 : What is the most purchased item on the menu and how many times was it purchased by all customers?

Select sales.product_id,menu.product_name, count(sales.product_id) as no_of_times_ordered
from sales join menu on sales.product_id = menu.product_id
group by sales.product_id, menu.product_name
order by no_of_times_ordered desc limit 1;

Question 5: Which item was the most popular for each customer?

with final_table as 
(Select customer_id , product_name, rank() over(partition by customer_id order by no_of_times_ordered desc) as most_ordered  from 
(Select sales.customer_id,menu.product_name, count(sales.product_id)  as no_of_times_ordered
from sales inner join menu on sales.product_id = menu.product_id
group by sales.customer_id,menu.product_name) 
temp)
Select customer_id, product_name from final_table where most_ordered=1 ;

Question 6: Which item was purchased first by the customer after they became a member?

With CTE as
(Select sales.customer_id, menu.product_name, dense_rank() over(partition by sales.customer_id order by sales.order_date) as ranking
 from sales inner join members on sales.customer_id= members.customer_id inner join menu on sales.product_id=menu.product_id 
where sales.order_date> members.join_date)
Select customer_id, product_name from CTE where ranking=1;

Question 7: Which item was purchased just before the customer became a member?

With CTE as
(Select sales.customer_id, menu.product_name, dense_rank() over(partition by sales.customer_id order by sales.order_date) as ranking
 from sales inner join members on sales.customer_id= members.customer_id inner join menu on sales.product_id=menu.product_id 
where sales.order_date< members.join_date)
Select customer_id, product_name from CTE where ranking=1;

Question 8: What is the total items and amount spent for each member before they became a member?

Select sales.customer_id, sum(menu.price) As total_expenditure,count(sales.product_id) as no_of_order
 from sales inner join members on sales.customer_id= members.customer_id inner join menu on sales.product_id=menu.product_id 
where sales.order_date< members.join_date
group by sales.customer_id order by sales.customer_id ;

Question 9 : If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

Select customer_id, sum(points) from
(Select sales.customer_id, 
case when menu.product_name ="sushi" then (menu.price)*10*2
else menu.price*10
end as Points 
from sales join menu on sales.product_id=menu.product_id) temp group by customer_id;

Question 10: In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

Select customer_id, sum(points) from
(Select sales.customer_id,menu.price,sales.order_date,
case 
when sales.order_date between members.join_date and members.join_date+7 then (menu.price)*10*2 
when menu.product_name='sushi' then (menu.price)*10*2
else (menu.price)*10
end as points
from sales join members on sales.customer_id= members.customer_id
inner join menu on  sales.product_id=menu.product_id
where order_date < '2021-02-01')
temp group by customer_id
order by customer_id;


BONUS Question: Join All The Things

Select sales.customer_id,sales.order_date, menu.product_name, menu.price,
case when sales.order_date< members.join_date then 'N'
when sales.order_date >= members.join_date then 'Y'
else 'NULL'
end as member
from sales left join members on sales.customer_id= members.customer_id
join menu on sales.product_id= menu.product_id;

BONUS Question:Danny also requires further information about the ranking of customer products,
but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.

With CTE as
(Select sales.customer_id,sales.order_date, menu.product_name, menu.price,
case when sales.order_date< members.join_date then 'N'
when sales.order_date >= members.join_date then 'Y'
else 'NULL'
end as member
from sales left join members on sales.customer_id= members.customer_id
join menu on sales.product_id= menu.product_id) 
Select * , 
case when member ='Y' then row_number() over(partition by customer_id,member) 
when member='N' then 'null'
else 'null'
end as ranking
from CTE;




